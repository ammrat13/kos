// PARAMETERS:
LOCAL triggerAlt TO 500000.
LOCAL horSpeedTol TO 0.2.
LOCAL angTol TO 1.
LOCAL margin TO 100.

LOCAL holdAlt TO 150.
LOCAL upHold TO 2.
LOCAL holdSp TO 0.5.
LOCAL kill TO 0.1.


// HELPER FUNCTIONS:
LOCAL FUNCTION bTime {
	DECLARE PARAMETER dv.
	
	LOCAL thrust TO 0.
	LOCAL flow TO 0.
	FOR p IN SHIP:PARTS {
		IF p:HASMODULE("ModuleEnginesFX") AND p:ISP <> 0 {
			SET thrust TO thrust + p:AVAILABLETHRUST.
			SET flow TO flow + p:AVAILABLETHRUST / (9.80665 * p:ISP).
		}
	}
	LOCAL avgIsp TO thrust / (9.80665 * flow).

	RETURN (avgIsp*9.80665)/thrust * (SHIP:MASS - SHIP:MASS * CONSTANT:E^(-1 * dv / (9.80665 * avgIsp))).
}

CLEARSCREEN.
UNTIL SHIP:ALTITUDE <= triggerAlt {
	PRINT "State: Waiting" AT (1,1).
	PRINT "Alt:   " + SHIP:ALTITUDE AT (1,2).
	PRINT "Targ:  " + triggerAlt AT (1,3).
}

CLEARSCREEN.
UNTIL VXCL(UP:FOREVECTOR, SHIP:OBT:VELOCITY:SURFACE):MAG <= horSpeedTol {
	PRINT "State: Killing horizontal velocity" AT (1,1).
	PRINT "Vel:   " + VXCL(UP:FOREVECTOR, SHIP:OBT:VELOCITY:SURFACE):MAG AT (1,2).
	PRINT "Ang:   " + VANG(-1*VXCL(UP:FOREVECTOR, SHIP:OBT:VELOCITY:SURFACE), SHIP:FACING:FOREVECTOR) AT (1,3).
	LOCK STEERING TO LOOKDIRUP(-1*VXCL(UP:FOREVECTOR, SHIP:OBT:VELOCITY:SURFACE), SHIP:FACING:TOPVECTOR).
	IF VANG(-1*VXCL(UP:FOREVECTOR, SHIP:OBT:VELOCITY:SURFACE), SHIP:FACING:FOREVECTOR) <= angTol {
		LOCK THROTTLE TO MIN(1, bTime(VXCL(UP:FOREVECTOR, SHIP:OBT:VELOCITY:SURFACE):MAG)).
	} ELSE {
		LOCK THROTTLE TO 0.
	}
}

CLEARSCREEN.
UNTIL ALT:RADAR <= holdAlt {
	PRINT "State: Suicide Burning" AT (1,1).
	PRINT "Alt:   " + (SHIP:ALTITUDE-SHIP:GEOPOSITION:TERRAINHEIGHT) AT (1,2).
	PRINT "DeltX: " + (SHIP:OBT:VELOCITY:SURFACE:MAG)^2 / (2 * (SHIP:AVAILABLETHRUST / SHIP:MASS - SHIP:OBT:BODY:MU / (SHIP:ALTITUDE + SHIP:OBT:BODY:RADIUS)^2)) AT (1,3).
	
	IF SHIP:OBT:VELOCITY:SURFACE:MAG <= upHold{
		LOCK STEERING TO LOOKDIRUP(UP:FOREVECTOR, SHIP:FACING:TOPVECTOR).
	} ELSE {
		LOCK STEERING TO SHIP:SRFRETROGRADE.
	}

	IF SHIP:ALTITUDE-SHIP:GEOPOSITION:TERRAINHEIGHT - margin <= (SHIP:OBT:VELOCITY:SURFACE:MAG)^2 / (2 * (SHIP:AVAILABLETHRUST / SHIP:MASS - SHIP:OBT:BODY:MU / (SHIP:ALTITUDE + SHIP:OBT:BODY:RADIUS)^2)){
		LOCK THROTTLE TO 1.
	} ELSE {
		LOCK THROTTLE TO 0.
	}
}

CLEARSCREEN.
UNTIL SHIP:OBT:VELOCITY:SURFACE:MAG < kill {
	PRINT "State: Holding velocity" AT (1,1).
	PRINT "VS:    " + SHIP:VERTICALSPEED AT (1,2).
	IF SHIP:OBT:VELOCITY:SURFACE:MAG <= upHold{
		LOCK STEERING TO LOOKDIRUP(UP:FOREVECTOR, SHIP:FACING:TOPVECTOR).
	} ELSE {
		LOCK STEERING TO SHIP:SRFRETROGRADE.
	}
	LOCK THROTTLE TO ((ABS(SHIP:VERTICALSPEED)-holdSp) + 1) / ((SHIP:AVAILABLETHRUST / SHIP:MASS) / (SHIP:OBT:BODY:MU / (SHIP:ALTITUDE + SHIP:OBT:BODY:RADIUS)^2)).
}

UNLOCK STEERING .
UNLOCK THROTTLE .
SET SHIP:CONTROL:PILOTMAINTHROTTLE TO 0.
SET SHIP:CONTROL:NEUTRALIZE TO TRUE.
